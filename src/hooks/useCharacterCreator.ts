import { useState } from 'react';
import { CharacterInput, ProcessedCharacterData, CharacterPromptD, GeminiResponse } from '@/types/character';
import { CharacterProcessor } from '@/utils/characterProcessor';
import { GeminiService } from '@/services/geminiService';

export const useCharacterCreator = () => {
  const [isProcessing, setIsProcessing] = useState(false);
  const [processedData, setProcessedData] = useState<ProcessedCharacterData | null>(null);
  const [characterPrompt, setCharacterPrompt] = useState<CharacterPromptD | null>(null);
  const [formattedPrompt, setFormattedPrompt] = useState<string>('');
  const [errors, setErrors] = useState<string[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);

  const processCharacterInput = async (input: CharacterInput): Promise<boolean> => {
    setIsProcessing(true);
    setErrors([]);
    
    try {
      // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const validatedData = CharacterProcessor.validateAndCleanInput(input);
      
      if (!validatedData.isValid) {
        setErrors(validatedData.errors);
        setIsProcessing(false);
        return false;
      }
      
      // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°
      const enrichedData = CharacterProcessor.enrichCharacterData(validatedData);
      setProcessedData(enrichedData);
      
      console.log('‚úÖ Character data processed successfully:', enrichedData);
      setIsProcessing(false);
      return true;
      
    } catch (error) {
      console.error('‚ùå Error processing character data:', error);
      setErrors(['‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•']);
      setIsProcessing(false);
      return false;
    }
  };

  const generateCharacterPrompt = async (): Promise<boolean> => {
    if (!processedData) {
      setErrors(['‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß']);
      return false;
    }

    setIsGenerating(true);
    setErrors([]);

    try {
      console.log('üöÄ Generating character with Gemini API...');
      
      const response: GeminiResponse = await GeminiService.generateCharacter(processedData);
      
      if (!response.success) {
        setErrors([response.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£']);
        setIsGenerating(false);
        return false;
      }

      if (response.data) {
        setCharacterPrompt(response.data);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á formatted prompt
        const formatted = GeminiService.formatCharacterPrompt(response.data);
        setFormattedPrompt(formatted);
        
        console.log('‚úÖ Character prompt generated successfully');
      }

      setIsGenerating(false);
      return true;

    } catch (error) {
      console.error('‚ùå Error generating character prompt:', error);
      setErrors(['‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AI API']);
      setIsGenerating(false);
      return false;
    }
  };

  const resetProcessor = () => {
    setProcessedData(null);
    setCharacterPrompt(null);
    setFormattedPrompt('');
    setErrors([]);
    setIsProcessing(false);
    setIsGenerating(false);
  };

  return {
    // Process functions
    processCharacterInput,
    generateCharacterPrompt,
    resetProcessor,
    
    // States
    isProcessing,
    isGenerating,
    processedData,
    characterPrompt,
    formattedPrompt,
    errors,
    
    // Computed
    isLoading: isProcessing || isGenerating
  };
};