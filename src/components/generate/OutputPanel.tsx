"use client";

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import {
  Copy, 
  Edit3, 
  Heart, 
  Languages, 
  User,
  Check,
  Download,
  RotateCcw,
  Zap
} from 'lucide-react';
import { useTranslation } from '@/hooks/useTranslation';
import { useCharacters } from '@/contexts/CharactersContext';
import { toast } from 'sonner';

interface OutputPanelProps {
  prompt: string;
  isLoading?: boolean;
  onPromptUpdate?: (newPrompt: string) => void;
  characterId?: string;
}

const OutputPanel: React.FC<OutputPanelProps> = ({ 
  prompt, 
  isLoading = false,
  onPromptUpdate,
  characterId
}) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editedPrompt, setEditedPrompt] = useState('');
  const [copySuccess, setCopySuccess] = useState(false);
  const [isFavorited, setIsFavorited] = useState(false);
  const [isUpdatingFavorite, setIsUpdatingFavorite] = useState(false);
  
  // Translation states
  const [isTranslated, setIsTranslated] = useState(false);
  const [originalPrompt, setOriginalPrompt] = useState('');
  const [currentLanguage, setCurrentLanguage] = useState<'th' | 'en'>('en');
  
  const { 
    translateMultiline, 
    isTranslating, 
    translationError, 
    lastTranslationStats,
    clearError 
  } = useTranslation();

  const { toggleFavorite: toggleFavoriteInContext } = useCharacters();

  // Update edited prompt when prompt changes
  useEffect(() => {
    if (!isTranslated) {
      setEditedPrompt(prompt);
      setOriginalPrompt(prompt);
      setCurrentLanguage('en');
    }
    setIsEditing(false);
  }, [prompt, isTranslated]);

  // Check favorite status for character
  useEffect(() => {
    const checkFavoriteStatus = async () => {
      if (!characterId) return;
      
      try {
        const response = await fetch(`/api/characters/${characterId}`);
        if (response.ok) {
          const data = await response.json();
          setIsFavorited(data.character?.is_favorite || false);
        }
      } catch (error) {
        console.error('Failed to check favorite status:', error);
      }
    };

    checkFavoriteStatus();
  }, [characterId]);

  const detectLanguage = (text: string): 'th' | 'en' => {
    const thaiRegex = /[\u0E00-\u0E7F]/;
    return thaiRegex.test(text) ? 'th' : 'en';
  };

  const handleCopy = async () => {
    try {
      const textToCopy = isEditing ? editedPrompt : (isTranslated ? editedPrompt : prompt);
      await navigator.clipboard.writeText(textToCopy);
      setCopySuccess(true);
      toast.success('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß!');
      
      setTimeout(() => setCopySuccess(false), 2000);
    } catch (error) {
      console.error('‚ùå Failed to copy:', error);
      toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏î‡πâ');
    }
  };

  const handleEdit = () => {
    if (isEditing) {
      console.log('üíæ Saving edited character prompt');
      if (onPromptUpdate && !isTranslated) {
        onPromptUpdate(editedPrompt);
      }
      setIsEditing(false);
      toast.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      setIsEditing(true);
    }
  };

  const handleTranslate = async () => {
    if (isTranslating) return;
    
    clearError();
    
    try {
      const textToTranslate = isEditing ? editedPrompt : prompt;
      const targetLang = currentLanguage === 'th' ? 'en' : 'th';
      
      console.log(`üåê Translating character: ${currentLanguage} ‚Üí ${targetLang}`);
      
      const result = await translateMultiline(textToTranslate, currentLanguage, targetLang);
      
      if (result.success) {
        if (!isTranslated) {
          setOriginalPrompt(textToTranslate);
        }
        
        setEditedPrompt(result.translatedText);
        setCurrentLanguage(targetLang);
        setIsTranslated(true);
        setIsEditing(false);
        
        toast.success('‡πÅ‡∏õ‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
      } else {
        toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
      }
      
    } catch (error) {
      console.error('‚ùå Translation error:', error);
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•');
    }
  };

  const handleResetTranslation = () => {
    setEditedPrompt(originalPrompt);
    setCurrentLanguage(detectLanguage(originalPrompt));
    setIsTranslated(false);
    setIsEditing(false);
    toast.success('‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
  };

  const handleFavorite = async () => {
    if (isUpdatingFavorite) return;
    
    if (!characterId) {
      toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }

    setIsUpdatingFavorite(true);
    
    try {
      await toggleFavoriteInContext(characterId, !isFavorited);
      setIsFavorited(!isFavorited);
      
      toast.success(
        !isFavorited 
          ? '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß' 
          : '‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß'
      );
    } catch (error) {
      console.error('‚ùå Failed to update favorite:', error);
      toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÑ‡∏î‡πâ');
    } finally {
      setIsUpdatingFavorite(false);
    }
  };

  const handleDownload = () => {
    const textToDownload = isEditing ? editedPrompt : (isTranslated ? editedPrompt : prompt);
    const blob = new Blob([textToDownload], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = `character-prompt-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast.success('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
  };

  const getCurrentText = () => {
    if (isEditing) return editedPrompt;
    if (isTranslated) return editedPrompt;
    return prompt;
  };

  return (
    <Card className="h-fit">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</CardTitle>
          
          {prompt && (
            <div className="flex items-center gap-2">
              <Badge variant="outline" className="text-xs">
                {currentLanguage === 'en' ? 'üá∫üá∏ English' : 'üáπüá≠ ‡πÑ‡∏ó‡∏¢'}
              </Badge>
              
              {isTranslated && (
                <Badge variant="secondary" className="text-xs">
                  <Languages className="w-3 h-3 mr-1" />
                  ‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡πâ‡∏ß
                </Badge>
              )}
              
              {lastTranslationStats && lastTranslationStats.fromCache && (
                <Badge variant="outline" className="text-xs text-green-600">
                  <Zap className="w-3 h-3 mr-1" />
                  Cache
                </Badge>
              )}
            </div>
          )}
        </div>
      </CardHeader>
      
      <CardContent>
        {isLoading ? (
          <div className="text-center text-muted-foreground py-12">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
            <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£...</p>
            <p className="text-xs mt-2">‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...</p>
          </div>
        ) : prompt ? (
          <div className="space-y-4">
            {translationError && (
              <div className="bg-red-50 border border-red-200 rounded-md p-3">
                <div className="text-red-700 text-sm">
                  ‚ö†Ô∏è {translationError}
                </div>
              </div>
            )}
            
            <div className="bg-muted p-4 rounded-lg">
              {isEditing ? (
                <Textarea
                  value={editedPrompt}
                  onChange={(e) => setEditedPrompt(e.target.value)}
                  className="min-h-[400px] font-mono text-sm border-0 bg-transparent resize-none focus:ring-0"
                  placeholder="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç prompt ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£..."
                  disabled={isTranslating}
                />
              ) : (
                <pre className="text-sm whitespace-pre-wrap font-mono overflow-auto max-h-[500px]">
                  {getCurrentText()}
                </pre>
              )}
            </div>
            
            <div className="flex flex-wrap gap-2">
              <Button 
                variant="outline" 
                size="sm" 
                onClick={handleCopy}
                className={copySuccess ? 'bg-green-50 text-green-700 border-green-200' : ''}
              >
                {copySuccess ? (
                  <>
                    <Check className="w-4 h-4 mr-2" />
                    Copied!
                  </>
                ) : (
                  <>
                    <Copy className="w-4 h-4 mr-2" />
                    Copy
                  </>
                )}
              </Button>
              
              <Button 
                variant="outline" 
                size="sm" 
                onClick={handleEdit}
                disabled={isTranslating}
              >
                <Edit3 className="w-4 h-4 mr-2" />
                {isEditing ? 'Save' : 'Edit'}
              </Button>
              
              <Button 
                variant="outline" 
                size="sm" 
                onClick={handleFavorite}
                disabled={isTranslating || isUpdatingFavorite || !characterId}
                className={isFavorited ? 'bg-red-50 text-red-600 border-red-200' : ''}
              >
                <Heart className={`w-4 h-4 mr-2 ${isFavorited ? 'fill-current' : ''} ${isUpdatingFavorite ? 'animate-pulse' : ''}`} />
                {isUpdatingFavorite 
                  ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' 
                  : isFavorited 
                    ? 'Favorited' 
                    : 'Favorite'
                }
              </Button>
              
              <Button 
                variant="outline" 
                size="sm" 
                onClick={handleTranslate}
                disabled={isTranslating}
                className={isTranslating ? 'opacity-50' : ''}
              >
                <Languages className={`w-4 h-4 mr-2 ${isTranslating ? 'animate-spin' : ''}`} />
                {isTranslating 
                  ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•...' 
                  : currentLanguage === 'en' 
                    ? '‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢' 
                    : '‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©'
                }
              </Button>
              
              {isTranslated && (
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={handleResetTranslation}
                  disabled={isTranslating}
                >
                  <RotateCcw className="w-4 h-4 mr-2" />
                  ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
                </Button>
              )}
              
              <Button 
                variant="outline" 
                size="sm" 
                onClick={handleDownload}
                disabled={isTranslating}
              >
                <Download className="w-4 h-4 mr-2" />
                Download
              </Button>
            </div>
            
            {isEditing && (
              <div className="text-xs text-muted-foreground border-l-2 border-orange-400 pl-3">
                üí° ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç prompt - ‡∏Å‡∏î "Save" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
              </div>
            )}
            
            {isTranslated && !isEditing && (
              <div className="text-xs text-muted-foreground border-l-2 border-blue-400 pl-3">
                üåê prompt ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡πâ‡∏ß - ‡∏Å‡∏î "‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ "Edit" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
              </div>
            )}
          </div>
        ) : (
          <div className="text-center text-muted-foreground py-12">
            <User className="w-12 h-12 mx-auto mb-4 opacity-50" />
            <p>‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</p>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default OutputPanel;