import { CharacterPromptD } from '@/types/character';

interface GeminiResponse {
  success: boolean;
  data?: CharacterPromptD;
  error?: string;
  rawResponse?: string;
}

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° enum ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Realism Types
export enum RealismType {
  PHOTOREALISTIC = "Photorealistic",
  ANIME_3D = "3D Anime Style", 
  ANIME_2D = "2D Anime Style",
  CARTOON = "Cartoon Style",
  SEMI_REALISTIC = "Semi-Realistic",
  STYLIZED = "Stylized Art",
  CINEMATIC = "Cinematic Style",
  ILLUSTRATION = "Digital Illustration",
  CONCEPT_ART = "Concept Art Style"
}

export class GeminiService {
  private static readonly API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';
  private static readonly API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY;

  /**
   * ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å realism type ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
   */
  private static determineRealismType(processedData: any): RealismType {
    const { description, role, personalityHints } = processedData;
    const text = `${description} ${role} ${personalityHints?.join(' ') || ''}`.toLowerCase();
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î realism type ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ
    if (text.includes('anime') || text.includes('‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞')) {
      return RealismType.ANIME_3D;
    }
    
    if (text.includes('cartoon') || text.includes('‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô')) {
      return RealismType.CARTOON;
    }
    
    if (text.includes('realistic') || text.includes('‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á')) {
      return RealismType.PHOTOREALISTIC;
    }
    
    if (text.includes('cinematic') || text.includes('‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå')) {
      return RealismType.CINEMATIC;
    }
    
    if (text.includes('concept') || text.includes('‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î')) {
      return RealismType.CONCEPT_ART;
    }
    
    // Default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≤‡∏á‡πÜ
    if (role.includes('‡∏ô‡∏±‡∏Å‡∏£‡∏ö') || role.includes('‡∏ã‡∏≤‡∏°‡∏π‡πÑ‡∏£') || role.includes('warrior')) {
      return RealismType.CINEMATIC;
    }
    
    if (role.includes('‡πÅ‡∏°‡πà‡∏°‡∏î') || role.includes('‡πÄ‡∏ß‡∏ó‡∏¢‡πå') || role.includes('magic')) {
      return RealismType.STYLIZED;
    }
    
    if (role.includes('‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö') || role.includes('detective')) {
      return RealismType.SEMI_REALISTIC;
    }
    
    // Default fallback
    return RealismType.ANIME_3D;
  }

  /**
   * ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï prompt ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö realism types ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
   */
  static createCharacterPrompt(processedData: any): string {
    const { name, description, gender, age, role, personalityHints, ageGroup } = processedData;
    const recommendedRealism = this.determineRealismType(processedData);
    
    return `
You are a professional character designer AI. Create a detailed character profile based on the input data.

**INPUT DATA:**
- Name: ${name}
- Description: ${description}
- Gender: ${gender}
- Age: ${age || 'Not specified'}
- Role: ${role}
- Age Group: ${ageGroup}
- Personality Hints: ${personalityHints?.join(', ') || 'None'}
- Recommended Style: ${recommendedRealism}

**INSTRUCTIONS:**
1. Create a comprehensive character profile following the exact JSON structure provided
2. Fill ALL fields - if information is not provided, create appropriate details that fit the character
3. Maintain consistency across all attributes
4. Use descriptive, visual language suitable for AI image generation
5. Keep the character culturally appropriate and visually appealing
6. Choose the most appropriate realism type from the available options

**AVAILABLE REALISM TYPES:**
- "Photorealistic": Hyper-realistic, lifelike human features
- "3D Anime Style": Modern 3D anime with detailed features
- "2D Anime Style": Traditional flat anime illustration style
- "Cartoon Style": Simplified, exaggerated cartoon features
- "Semi-Realistic": Blend of realistic and stylized elements
- "Stylized Art": Artistic interpretation with unique style
- "Cinematic Style": Movie-quality realistic rendering
- "Digital Illustration": High-quality digital art style
- "Concept Art Style": Professional concept art rendering

**REQUIRED JSON OUTPUT FORMAT:**
\`\`\`json
{
  "name": "character full name",
  "nickname": "character nickname or short name",
  "role": "character role/profession",
  "gender": "Male/Female/Non-binary",
  "age": "age or age range",
  "ethnicity": "character ethnicity based on name and context",
  "bodyType": "body type description (athletic, slim, muscular, etc.)",
  "heightWeight": "height and weight description",
  "skinTone": "skin tone description",
  "faceShape": "face shape description (oval, round, square, etc.)",
  "faceFeatures": "detailed facial features description",
  "eyes": "eye color, shape, and characteristics",
  "eyebrows": "eyebrow description",
  "lips": "lip description",
  "hairStyle": "hair style description",
  "hairColor": "hair color",
  "hairDetails": "additional hair details (texture, length, etc.)",
  "topShirt": "top/shirt description",
  "bottomPantsSkirt": "bottom wear description",
  "outerwear": "outer garment description",
  "shoes": "footwear description",
  "fabricMaterial": "fabric and material details",
  "headAccessories": "head accessories description (or 'None')",
  "jewelry": "jewelry description (or 'None')",
  "otherAccessories": "other accessories description (or 'None')",
  "personalityTraits": "personality traits description",
  "confidenceLevel": "confidence level description",
  "cameraPresence": "camera presence description",
  "initialPose": "starting pose description",
  "bodyLanguage": "body language description",
  "voicePitch": "voice pitch description",
  "speakingStyle": "speaking style description",
  "accentDialect": "accent or dialect description",
  "voiceCharacteristics": "voice characteristics description",
  "uniqueTraits": "unique character traits",
  "specialEffects": "special visual effects if any (or 'None')",
  "realismType": "choose from available realism types above"
}
\`\`\`

**IMPORTANT:** 
- Return ONLY the JSON object, no additional text
- Ensure all fields are filled with meaningful descriptions
- Make descriptions vivid and suitable for AI image generation
- Choose realism type that best fits the character concept
- Keep cultural sensitivity in mind
- Use "None" for accessories/effects if not applicable
`;
  }

  /**
   * ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini API (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
   */
  static async generateCharacter(processedData: any): Promise<GeminiResponse> {
    try {
      if (!this.API_KEY) {
        return {
          success: false,
          error: 'Gemini API key not configured'
        };
      }

      const prompt = this.createCharacterPrompt(processedData);
      
      console.log('üöÄ Sending request to Gemini API...');
      console.log('üìù Prompt:', prompt.substring(0, 200) + '...');

      const response = await fetch(`${this.API_URL}?key=${this.API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 2048,
          }
        })
      });

      if (!response.ok) {
        throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      
      if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
        throw new Error('Invalid response structure from Gemini API');
      }

      const rawResponse = data.candidates[0].content.parts[0].text;
      console.log('üì• Raw Gemini response:', rawResponse);

      // ‡πÅ‡∏¢‡∏Å JSON ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
      const jsonMatch = rawResponse.match(/```json\n([\s\S]*?)\n```/) || 
                       rawResponse.match(/\{[\s\S]*\}/);
      
      if (!jsonMatch) {
        throw new Error('No JSON found in Gemini response');
      }

      const jsonString = jsonMatch[1] || jsonMatch[0];
      const characterData: CharacterPromptD = JSON.parse(jsonString);

      // Validate required fields
      const requiredFields = ['name', 'role', 'gender'];
      const missingFields = requiredFields.filter(field => !characterData[field as keyof CharacterPromptD]);
      
      if (missingFields.length > 0) {
        throw new Error(`Missing required fields: ${missingFields.join(', ')}`);
      }

      console.log('‚úÖ Character generated successfully:', characterData.name);

      return {
        success: true,
        data: characterData,
        rawResponse
      };

    } catch (error) {
      console.error('‚ùå Gemini API error:', error);
      
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error occurred',
        rawResponse: undefined
      };
    }
  }

  /**
   * ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï formatting ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á realism type ‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
   */
  static formatCharacterPrompt(character: CharacterPromptD): string {
    return `
üìã **Character Identity Template**

üë§ **1. ‡∏ä‡∏∑‡πà‡∏≠ / ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó (Name / Role)**
‚Ä¢ Name: ${character.name}
‚Ä¢ Nickname: ${character.nickname}
‚Ä¢ Role: ${character.role}

üßë‚Äçüé® **2. ‡πÄ‡∏û‡∏® / ‡∏≠‡∏≤‡∏¢‡∏∏ / ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥ (Gender / Age / Ethnicity)**
‚Ä¢ Gender: ${character.gender}
‚Ä¢ Age: ${character.age}
‚Ä¢ Ethnicity: ${character.ethnicity}

üíÉ **3. ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á / ‡∏ú‡∏¥‡∏ß (Body / Skin)**
‚Ä¢ Body type: ${character.bodyType}
‚Ä¢ Height & Weight: ${character.heightWeight}
‚Ä¢ Skin tone: ${character.skinTone}

üë§ **4. ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (Face)**
‚Ä¢ Face shape: ${character.faceShape}
‚Ä¢ Face features: ${character.faceFeatures}

üëÅÔ∏è **5. ‡∏î‡∏ß‡∏á‡∏ï‡∏≤ / ‡∏Ñ‡∏¥‡πâ‡∏ß (Eyes / Eyebrows)**
‚Ä¢ Eyes: ${character.eyes}
‚Ä¢ Eyebrows: ${character.eyebrows}

üëÑ **6. ‡∏£‡∏¥‡∏°‡∏ù‡∏µ‡∏õ‡∏≤‡∏Å (Lips)**
‚Ä¢ Lips: ${character.lips}

üíá‚Äç‚ôÄÔ∏è **7. ‡∏ú‡∏° (Hair)**
‚Ä¢ Hair style: ${character.hairStyle}
‚Ä¢ Hair color: ${character.hairColor}
‚Ä¢ Hair details: ${character.hairDetails}

üëó **8. ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢ (Outfit)**
‚Ä¢ Top/Shirt: ${character.topShirt}
‚Ä¢ Bottom/Pants/Skirt: ${character.bottomPantsSkirt}
‚Ä¢ Outerwear: ${character.outerwear}
‚Ä¢ Shoes: ${character.shoes}
‚Ä¢ Fabric/Material: ${character.fabricMaterial}

üíé **9. ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö (Accessories)**
‚Ä¢ Head accessories: ${character.headAccessories}
‚Ä¢ Jewelry: ${character.jewelry}
‚Ä¢ Other accessories: ${character.otherAccessories}

üé≠ **10. ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û (Personality)**
‚Ä¢ Personality traits: ${character.personalityTraits}
‚Ä¢ Confidence level: ${character.confidenceLevel}
‚Ä¢ Camera presence: ${character.cameraPresence}

üï¥Ô∏è **11. ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (Starting Pose)**
‚Ä¢ Initial pose: ${character.initialPose}
‚Ä¢ Body language: ${character.bodyLanguage}

üéôÔ∏è **12. ‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Voice Tone)**
‚Ä¢ Voice pitch: ${character.voicePitch}
‚Ä¢ Speaking style: ${character.speakingStyle}
‚Ä¢ Accent/Dialect: ${character.accentDialect}
‚Ä¢ Voice characteristics: ${character.voiceCharacteristics}

‚ú® **13. ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏© (Special Features)**
‚Ä¢ Unique traits: ${character.uniqueTraits}
‚Ä¢ Special effects: ${character.specialEffects}

üñºÔ∏è **14. ‡∏†‡∏≤‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á (Visual Style)**
‚Ä¢ Realism type: ${character.realismType}
`.trim();
  }

  /**
   * ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° utility function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö realism types ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  static getAllRealismTypes(): { value: RealismType; label: string; description: string }[] {
    return [
      {
        value: RealismType.PHOTOREALISTIC,
        label: "Photorealistic",
        description: "‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á ‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"
      },
      {
        value: RealismType.CINEMATIC,
        label: "Cinematic Style", 
        description: "‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á"
      },
      {
        value: RealismType.ANIME_3D,
        label: "3D Anime Style",
        description: "‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞ 3 ‡∏°‡∏¥‡∏ï‡∏¥‡∏™‡∏°‡∏±‡∏¢‡πÉ‡∏´‡∏°‡πà"
      },
      {
        value: RealismType.ANIME_2D,
        label: "2D Anime Style", 
        description: "‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡πÅ‡∏ö‡∏ö‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏° 2 ‡∏°‡∏¥‡∏ï‡∏¥"
      },
      {
        value: RealismType.SEMI_REALISTIC,
        label: "Semi-Realistic",
        description: "‡∏ú‡∏™‡∏°‡∏ú‡∏™‡∏≤‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πÑ‡∏ï‡∏•‡πå"
      },
      {
        value: RealismType.STYLIZED,
        label: "Stylized Art",
        description: "‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß"
      },
      {
        value: RealismType.CARTOON,
        label: "Cartoon Style",
        description: "‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"
      },
      {
        value: RealismType.ILLUSTRATION,
        label: "Digital Illustration",
        description: "‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á"
      },
      {
        value: RealismType.CONCEPT_ART,
        label: "Concept Art Style",
        description: "‡∏á‡∏≤‡∏ô‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ã‡∏õ‡∏ï‡πå‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û"
      }
    ];
  }
}