import { supabase, supabaseAdmin, isSupabaseReady } from '@/lib/supabase';
import { Database } from '@/types/database';

export type User = Database['public']['Tables']['users']['Row'];
export type UserInsert = Database['public']['Tables']['users']['Insert'];
export type CreditLog = Database['public']['Tables']['credit_logs']['Row'];

export class UserService {
  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Supabase ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
    private static checkSupabaseReady(): boolean {
        if (!isSupabaseReady()) {
        console.error('‚ùå Supabase is not configured properly. Please check your environment variables.');
        return false;
        }
        return true;
    }

    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ sign up
     */
    static async createUser(clerkId: string, email: string): Promise<{ success: boolean; user?: any; error?: string }> {
        try {
        if (!this.checkSupabaseReady() || !supabaseAdmin) {
            return {
            success: false,
            error: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
            };
        }

        console.log('üîÑ Creating new user:', { clerkId, email });

        // ‚úÖ ‡πÉ‡∏ä‡πâ upsert ‡πÅ‡∏ó‡∏ô insert ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á duplicate error
        const { data: user, error } = await supabaseAdmin
            .from('users')
            .upsert(
            {
                clerk_id: clerkId,
                email: email,
                credits: 100
            },
            { 
                onConflict: 'clerk_id',
                ignoreDuplicates: false 
            }
            )
            .select()
            .single();

        if (error) {
            console.error('‚ùå Database error:', error);
            
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô duplicate ‡πÅ‡∏ï‡πà upsert ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÅ‡∏ó‡∏ô
            if (error.code === '23505') {
            console.log('üîÑ Duplicate detected, trying to fetch existing user...');
            return this.getUserByClerkId(clerkId);
            }
            
            throw error;
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å credit log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        try {
            await this.addCreditLog(user.id, 100, 'initial_signup');
        } catch (logError) {
            console.error('‚ö†Ô∏è Failed to create credit log, but user created successfully:', logError);
        }

        console.log('‚úÖ User created successfully:', user);
        return { success: true, user };

        } catch (error) {
        console.error('‚ùå Error creating user:', error);
        return {
            success: false,
            error: error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
        };
        }
    }

    /**
    * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏≤‡∏Å Clerk ID
    */
    static async getUserByClerkId(clerkId: string): Promise<{ success: boolean; user?: any; error?: string }> {
        try {
        if (!this.checkSupabaseReady() || !supabase) {
            return {
            success: false,
            error: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
            };
        }

        console.log('üîç Searching for user with clerk_id:', clerkId);

        const { data: user, error } = await supabase
            .from('users')
            .select('*')
            .eq('clerk_id', clerkId)
            .single();

        if (error) {
            if (error.code === 'PGRST116') { // no rows returned
            console.log('‚ùå User not found in database');
            return { success: false, error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' };
            }
            console.error('‚ùå Database error:', error);
            throw error;
        }

        console.log('‚úÖ User found:', user);
        return { success: true, user };

        } catch (error) {
        console.error('‚ùå Error getting user:', error);
        return {
            success: false,
            error: error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
        };
        }
    }

    /**
    * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏≤‡∏Å ID
    */
    static async getUserById(userId: string): Promise<{ success: boolean; user?: any; error?: string }> {
        try {
        if (!this.checkSupabaseReady() || !supabase) {
            return {
            success: false,
            error: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
            };
        }
        const { data: user, error } = await supabase
            .from('users')
            .select('*')
            .eq('id', userId)
            .single();

        if (error) {
            throw error;
        }

        return { success: true, user };

        } catch (error) {
        console.error('‚ùå Error getting user by ID:', error);
        return {
            success: false,
            error: error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
        };
        }
    }

    /**
     * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á user
     */
    static async updateUserCredits(userId: string, newCredits: number): Promise<{ success: boolean; user?: any; error?: string }> {
        try {
        if (!this.checkSupabaseReady() || !supabaseAdmin) {
            return {
            success: false,
            error: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
            };
        }
        const { data: user, error } = await supabaseAdmin
            .from('users')
            .update({ credits: newCredits })
            .eq('id', userId)
            .select()
            .single();

        if (error) {
            throw error;
        }

        console.log(`‚úÖ Updated credits for user ${userId}: ${newCredits}`);
        return { success: true, user };

        } catch (error) {
        console.error('‚ùå Error updating credits:', error);
        return {
            success: false,
            error: error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï'
        };
        }
    }

    /**
     * ‡πÄ‡∏û‡∏¥‡πà‡∏° credit log
     */
    static async addCreditLog(userId: string, amount: number, reason: string): Promise<{ success: boolean; log?: any; error?: string }> {
        try {
        if (!this.checkSupabaseReady() || !supabaseAdmin) {
            return {
            success: false,
            error: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
            };
        }
        const { data: log, error } = await supabaseAdmin
            .from('credit_logs')
            .insert({
            user_id: userId,
            amount: amount,
            reason: reason
            })
            .select()
            .single();

        if (error) {
            throw error;
        }

        console.log(`üìù Credit log added: ${amount} for ${reason}`);
        return { success: true, log };

        } catch (error) {
        console.error('‚ùå Error adding credit log:', error);
        return {
            success: false,
            error: error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å credit log'
        };
        }
    }

    /**
     * ‡∏´‡∏±‡∏Å credits (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
     */
    static async deductCredits(userId: string, amount: number, reason: string): Promise<{ success: boolean; newCredits?: number; error?: string }> {
        try {
        if (!this.checkSupabaseReady()) {
            return {
            success: false,
            error: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
            };
        }

        // ‡∏î‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const userResult = await this.getUserById(userId);
        if (!userResult.success || !userResult.user) {
            return { success: false, error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' };
        }

        const currentCredits = userResult.user.credits;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (currentCredits < amount) {
            return { success: false, error: '‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠' };
        }

        const newCredits = currentCredits - amount;

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
        const updateResult = await this.updateUserCredits(userId, newCredits);
        if (!updateResult.success) {
            return { success: false, error: updateResult.error };
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å credit log
        await this.addCreditLog(userId, -amount, reason);

        console.log(`üí∏ Deducted ${amount} credits from user ${userId}. New balance: ${newCredits}`);
        return { success: true, newCredits };

        } catch (error) {
        console.error('‚ùå Error deducting credits:', error);
        return {
            success: false,
            error: error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï'
        };
        }
    }

    /**
     * ‡πÄ‡∏û‡∏¥‡πà‡∏° credits (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô)
     */
    static async addCredits(
        userId: string,
        amount: number,
        reason: string
    ): Promise<{ success: boolean; newCredits?: number; error?: string }> {
        try {
        // ‡∏î‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const userResult = await this.getUserById(userId);
        if (!userResult.success || !userResult.user) {
            return { success: false, error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' };
        }

        const currentCredits = userResult.user.credits;
        const newCredits = currentCredits + amount;

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
        const updateResult = await this.updateUserCredits(userId, newCredits);
        if (!updateResult.success) {
            return { success: false, error: updateResult.error };
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å credit log
        await this.addCreditLog(userId, amount, reason);

        console.log(`üí∞ Added ${amount} credits to user ${userId}. New balance: ${newCredits}`);
        return { success: true, newCredits };

        } catch (error) {
        console.error('‚ùå Error adding credits:', error);
        return {
            success: false,
            error: error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï'
        };
        }
    }

  /**
   * ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ credit logs
   */
  static async getCreditLogs(
    userId: string,
    limit: number = 50
  ): Promise<{ success: boolean; logs?: CreditLog[]; error?: string }> {
    try {
        if (!this.checkSupabaseReady() || !supabase) {
            return {
            success: false,
            error: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
            };
        }
        const { data: logs, error } = await supabase
            .from('credit_logs')
            .select('*')
            .eq('user_id', userId)
            .order('created_at', { ascending: false })
            .limit(limit);

        if (error) {
            throw error;
        }

        return { success: true, logs: logs || [] };

        } catch (error) {
        console.error('‚ùå Error getting credit logs:', error);
        return {
            success: false,
            error: error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï'
        };
        }
    }

    /**
    * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cron job)
    */
  static async resetDailyCredits(): Promise<{ success: boolean; count?: number; error?: string }> {
    try {
    if (!this.checkSupabaseReady() || !supabaseAdmin) {
        return {
        success: false,
        error: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
        };
    }
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï 100
    const { data, error } = await supabaseAdmin
    .from('users')
    .update({ credits: 100 })
    .neq('credits', 100) // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 100
    .select('id');

    if (error) {
    throw error;
    }

    const updatedCount = data?.length || 0;

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å credit log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
    if (updatedCount > 0) {
    const creditLogs = data.map(user => ({
        user_id: user.id,
        amount: 100,
        reason: 'daily_reset'
    }));

    await supabaseAdmin
        .from('credit_logs')
        .insert(creditLogs);
    }

      console.log(`üîÑ Daily credit reset completed. Updated ${updatedCount} users.`);
      return { success: true, count: updatedCount };

    } catch (error) {
      console.error('‚ùå Error resetting daily credits:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô'
      };
    }
  }
}